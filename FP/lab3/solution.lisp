(defun copy-array (arr)
  (let* ((dimensions (array-dimensions arr)) (new-arr (make-array dimensions)))
    (dotimes (i (array-total-size arr))
      (setf (row-major-aref new-arr i)
            (row-major-aref arr i)))
    new-arr))

(defun fun (mat)
    (let ((size (array-dimensions mat)))
        (let ((lines (first size)) (columns (second size)) (ans (copy-array mat)))
            (do ((i 0 (+ i 1)))
                ((>= i lines) ans)
                (do ((j (- columns 1) (- j 1)))
                    ((< j 0) 'done_str)
                    (if (> i 0) (setf (aref ans i j) (+ (aref ans (- i 1) j) (aref ans i j))))
                    (if (< j (- columns 1)) (setf (aref ans i j) (+ (aref ans i (+ j 1)) (aref ans i j))))
                    (if (and (> i 0) (< j (- columns 1))) (setf (aref ans i j) (- (aref ans i j) (aref ans (- i 1) (+ j 1)))))
                )))))
